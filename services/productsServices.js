"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockProducts = void 0;
exports.getProductsListService = getProductsListService;
exports.getProductsByIdService = getProductsByIdService;
exports.mockProducts = [
    {
        description: 'Short Product Description1',
        id: '7567ec4b-b10c-48c5-9345-fc73c48a80aa',
        price: 24,
        title: 'ProductOne',
    },
    {
        description: 'Short Product Description7',
        id: '7567ec4b-b10c-48c5-9345-fc73c48a80a1',
        price: 15,
        title: 'ProductTitle',
    },
    {
        description: 'Short Product Description2',
        id: '7567ec4b-b10c-48c5-9345-fc73c48a80a3',
        price: 23,
        title: 'Product',
    },
    {
        description: 'Short Product Description4',
        id: '7567ec4b-b10c-48c5-9345-fc73348a80a1',
        price: 15,
        title: 'ProductTest',
    },
    {
        description: 'Short Product Descriptio1',
        id: '7567ec4b-b10c-48c5-9445-fc73c48a80a2',
        price: 23,
        title: 'Product2',
    },
    {
        description: 'Short Product Description7',
        id: '7567ec4b-b10c-45c5-9345-fc73c48a80a1',
        price: 15,
        title: 'ProductName',
    },
];
async function getProductsListService() {
    try {
        // Potentially await a DB or API call here in the future
        return exports.mockProducts;
    }
    catch (error) {
        console.error('Error while getting products list', error);
        throw error;
    }
}
async function getProductsByIdService(productId) {
    try {
        const matches = exports.mockProducts.filter((x) => x.id?.startsWith(productId));
        return matches;
    }
    catch (error) {
        console.error(`Error while getting product by Id: ${productId}`, error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdHNTZXJ2aWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb2R1Y3RzU2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBeUNBLHdEQVFDO0FBRUQsd0RBWUM7QUE3RFksUUFBQSxZQUFZLEdBQWM7SUFDdEM7UUFDQyxXQUFXLEVBQUUsNEJBQTRCO1FBQ3pDLEVBQUUsRUFBRSxzQ0FBc0M7UUFDMUMsS0FBSyxFQUFFLEVBQUU7UUFDVCxLQUFLLEVBQUUsWUFBWTtLQUNuQjtJQUNEO1FBQ0MsV0FBVyxFQUFFLDRCQUE0QjtRQUN6QyxFQUFFLEVBQUUsc0NBQXNDO1FBQzFDLEtBQUssRUFBRSxFQUFFO1FBQ1QsS0FBSyxFQUFFLGNBQWM7S0FDckI7SUFDRDtRQUNDLFdBQVcsRUFBRSw0QkFBNEI7UUFDekMsRUFBRSxFQUFFLHNDQUFzQztRQUMxQyxLQUFLLEVBQUUsRUFBRTtRQUNULEtBQUssRUFBRSxTQUFTO0tBQ2hCO0lBQ0Q7UUFDQyxXQUFXLEVBQUUsNEJBQTRCO1FBQ3pDLEVBQUUsRUFBRSxzQ0FBc0M7UUFDMUMsS0FBSyxFQUFFLEVBQUU7UUFDVCxLQUFLLEVBQUUsYUFBYTtLQUNwQjtJQUNEO1FBQ0MsV0FBVyxFQUFFLDJCQUEyQjtRQUN4QyxFQUFFLEVBQUUsc0NBQXNDO1FBQzFDLEtBQUssRUFBRSxFQUFFO1FBQ1QsS0FBSyxFQUFFLFVBQVU7S0FDakI7SUFDRDtRQUNDLFdBQVcsRUFBRSw0QkFBNEI7UUFDekMsRUFBRSxFQUFFLHNDQUFzQztRQUMxQyxLQUFLLEVBQUUsRUFBRTtRQUNULEtBQUssRUFBRSxhQUFhO0tBQ3BCO0NBQ0QsQ0FBQztBQUVLLEtBQUssVUFBVSxzQkFBc0I7SUFDM0MsSUFBSSxDQUFDO1FBQ0osd0RBQXdEO1FBQ3hELE9BQU8sb0JBQVksQ0FBQztJQUNyQixDQUFDO0lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzFELE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFTSxLQUFLLFVBQVUsc0JBQXNCLENBQzNDLFNBQWlCO0lBRWpCLElBQUksQ0FBQztRQUNKLE1BQU0sT0FBTyxHQUFHLG9CQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBVSxFQUFFLEVBQUUsQ0FDbEQsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQzNCLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxTQUFTLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4RSxNQUFNLEtBQUssQ0FBQztJQUNiLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvZHVjdCwgUHJvZHVjdFNjaGVtYSB9IGZyb20gJy4uL21vZGVscy9Qcm9kdWN0JztcblxuZXhwb3J0IGNvbnN0IG1vY2tQcm9kdWN0czogUHJvZHVjdFtdID0gW1xuXHR7XG5cdFx0ZGVzY3JpcHRpb246ICdTaG9ydCBQcm9kdWN0IERlc2NyaXB0aW9uMScsXG5cdFx0aWQ6ICc3NTY3ZWM0Yi1iMTBjLTQ4YzUtOTM0NS1mYzczYzQ4YTgwYWEnLFxuXHRcdHByaWNlOiAyNCxcblx0XHR0aXRsZTogJ1Byb2R1Y3RPbmUnLFxuXHR9LFxuXHR7XG5cdFx0ZGVzY3JpcHRpb246ICdTaG9ydCBQcm9kdWN0IERlc2NyaXB0aW9uNycsXG5cdFx0aWQ6ICc3NTY3ZWM0Yi1iMTBjLTQ4YzUtOTM0NS1mYzczYzQ4YTgwYTEnLFxuXHRcdHByaWNlOiAxNSxcblx0XHR0aXRsZTogJ1Byb2R1Y3RUaXRsZScsXG5cdH0sXG5cdHtcblx0XHRkZXNjcmlwdGlvbjogJ1Nob3J0IFByb2R1Y3QgRGVzY3JpcHRpb24yJyxcblx0XHRpZDogJzc1NjdlYzRiLWIxMGMtNDhjNS05MzQ1LWZjNzNjNDhhODBhMycsXG5cdFx0cHJpY2U6IDIzLFxuXHRcdHRpdGxlOiAnUHJvZHVjdCcsXG5cdH0sXG5cdHtcblx0XHRkZXNjcmlwdGlvbjogJ1Nob3J0IFByb2R1Y3QgRGVzY3JpcHRpb240Jyxcblx0XHRpZDogJzc1NjdlYzRiLWIxMGMtNDhjNS05MzQ1LWZjNzMzNDhhODBhMScsXG5cdFx0cHJpY2U6IDE1LFxuXHRcdHRpdGxlOiAnUHJvZHVjdFRlc3QnLFxuXHR9LFxuXHR7XG5cdFx0ZGVzY3JpcHRpb246ICdTaG9ydCBQcm9kdWN0IERlc2NyaXB0aW8xJyxcblx0XHRpZDogJzc1NjdlYzRiLWIxMGMtNDhjNS05NDQ1LWZjNzNjNDhhODBhMicsXG5cdFx0cHJpY2U6IDIzLFxuXHRcdHRpdGxlOiAnUHJvZHVjdDInLFxuXHR9LFxuXHR7XG5cdFx0ZGVzY3JpcHRpb246ICdTaG9ydCBQcm9kdWN0IERlc2NyaXB0aW9uNycsXG5cdFx0aWQ6ICc3NTY3ZWM0Yi1iMTBjLTQ1YzUtOTM0NS1mYzczYzQ4YTgwYTEnLFxuXHRcdHByaWNlOiAxNSxcblx0XHR0aXRsZTogJ1Byb2R1Y3ROYW1lJyxcblx0fSxcbl07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9kdWN0c0xpc3RTZXJ2aWNlKCk6IFByb21pc2U8UHJvZHVjdFtdIHwgdW5kZWZpbmVkPiB7XG5cdHRyeSB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgYXdhaXQgYSBEQiBvciBBUEkgY2FsbCBoZXJlIGluIHRoZSBmdXR1cmVcblx0XHRyZXR1cm4gbW9ja1Byb2R1Y3RzO1xuXHR9IGNhdGNoIChlcnJvcjogYW55KSB7XG5cdFx0Y29uc29sZS5lcnJvcignRXJyb3Igd2hpbGUgZ2V0dGluZyBwcm9kdWN0cyBsaXN0JywgZXJyb3IpO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9kdWN0c0J5SWRTZXJ2aWNlKFxuXHRwcm9kdWN0SWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxQcm9kdWN0W10gfCB1bmRlZmluZWQ+IHtcblx0dHJ5IHtcblx0XHRjb25zdCBtYXRjaGVzID0gbW9ja1Byb2R1Y3RzLmZpbHRlcigoeDogUHJvZHVjdCkgPT5cblx0XHRcdHguaWQ/LnN0YXJ0c1dpdGgocHJvZHVjdElkKVxuXHRcdCk7XG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcblx0XHRjb25zb2xlLmVycm9yKGBFcnJvciB3aGlsZSBnZXR0aW5nIHByb2R1Y3QgYnkgSWQ6ICR7cHJvZHVjdElkfWAsIGVycm9yKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuIl19